#lang racket
(define (filter predicate sequence)
  (cond ((null? sequence) null)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
(define (odd? x)
  (= (remainder x 2) 1))
(filter odd? (list 1 2 3 4 5))
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(accumulate + 0 (list 1 2 3 4 5))
(define (enumerate-interval low high)
  (if (> low high)
      null
      (cons low (enumerate-interval (+ low 1) high))))
(define (enumerate-tree tree)
  (cond ((null? tree) null)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))
(define (sum-odd-squares tree)
  (accumulate +
              0
              (map (lambda (x) (* x x))
                   (filter (lambda (x) (= (remainder x 2) 1))
                           (enumerate-tree tree)))))
(define one-tree (list 1 (list 2 (list 3 4)) 5))
(sum-odd-squares one-tree)
(define (fib n)
  (define (iter a b count)
    (if (= count 0)
        b
        (iter (+ a b) a (- count 1))))
  (iter 1 0 n))
(define (even-fibs n)
  (accumulate cons null
              (filter (lambda (x) (= (remainder x 2) 0))
                      (map fib
                           (enumerate-interval 0 n)))))
(even-fibs 12)