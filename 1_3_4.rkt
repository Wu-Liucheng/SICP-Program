#lang racket
(define (deriv g)
  (define dx 0.00001)
  (lambda (x)
    (/ (- (g (+ dx x)) (g x)) dx)))
#|((deriv (lambda (x) (* x x x))) 5)|#
(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (sqrt x)
  (newtons-method (lambda (y) (- (* y y) x)) 1.0))
(sqrt 4)