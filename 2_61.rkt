#lang racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2)) '()
      (let ((x1 (car set1))
            (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set (cdr set1) (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((> x1 x2)
               (intersection-set x1 (cdr set2)))))))
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cond ((null? set) (append set (list x)))
            ((< x (car set)) (append (list x) set))
            ((> x (car set)) (append (list (car set)) (adjoin-set x (cdr set)))))))
(adjoin-set 1 (list 1 3 4 6 8))
(adjoin-set 5 (list 1 3 4 6 8))
(adjoin-set 10 (list 1 3 4 6 8))