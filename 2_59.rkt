#lang racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
(define (minus-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((not (element-of-set? (car set1) set2))
         (cons (car set1) (minus-set (cdr set1) set2)))
        (else (minus-set (cdr set1) set2))))
(define (union-set set1 set2)
  (append (minus-set set1 set2) set2))
(intersection-set (list 1 3 4 5 6) (list 1 7 8 'a 4))
(minus-set (list 1 3 4 5 6) (list 1 7 8 'a 4))
(union-set (list 1 3 4 5 6) (list 1 7 8 'a 4))