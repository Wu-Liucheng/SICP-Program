#lang racket
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define seq1 (list 1 2 3 4 5))
(define seq2 (list 1 3 4 7 9 11 13 15 17))
(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) null sequence))
(map (lambda (x) (* x x)) seq1)
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))
(append seq1 seq2)
(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
(length seq2)