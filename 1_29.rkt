#lang racket
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
(define (cube a)
  (* a a a))
(define (line x)
  x)
(define (even? x)
  (= (remainder x 2) 0))
(define (simpson-iter f a b n k)
  (cond ((= k n)
         (f b))
        ((even? k)
         (+ (* 2 (f (+ a (* k (/ (- b a) n))))) (simpson-iter f a b n (+ k 1))))
        ((not (even? k))
         (+ (* 4 (f (+ a (* k (/ (- b a) n))))) (simpson-iter f a b n (+ k 1))))))
(define (simpson f a b n)
  (* (/ (/ (- b a) n) 3) (+ (f a) (simpson-iter f a b n 1))))
(simpson line 0 20 10000)