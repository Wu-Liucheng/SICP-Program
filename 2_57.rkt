#lang racket
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2) (+ a1 a2)))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))
(define (** base exponent)
  (cond ((= exponent 0) 1)
        ((> exponent 0) (* base (** base (- exponent 1))))
        (else (* (/ 1 base) (** base (+ exponent 1))))))
(define (make-exponentiation base  exponent)
  (cond ((= exponent 0) 1)
        ((= exponent 1) base)
        ((= base 1) 1)
        (else (list '** base exponent))))
(define (single-operants exp)
  (null? (cdddr exp)))
(define (addend s) (cadr s))
(define (augend s)
  (if (single-operants s)
      (caddr s)
      (cons '+ (cons (caddr s) (cdddr s)))))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (if (single-operants p)
      (caddr p)
      (cons '* (cons (caddr p) (cdddr p)))))
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (let ((n (exponent exp))
               (u (base exp)))
           (make-product n (make-product (make-exponentiation u (- n 1)) (deriv u var)))))
        (else (error "unknown expession type -- DERIV" exp))))
(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)
