#lang racket
(define (square x) (* x x))
(define (inc x) (+ x 1))
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  (if (> n 1)
      (compose (repeated f (- n 1)) f)
      f))
(define dx 0.00001)
(define (smooth f)
  (lambda (x) (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3)))
((repeated (smooth square) 3) 2)