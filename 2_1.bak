#lang racket
(define (abs x)
  (cond ((> x 0) x)
        (else (* -1 x))))
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define (make-rat n d)
  (let ((g (abs (gcd n d))))
    (cond ((> d 0) (cons (/ n g) (/ d g)))
          ((< d 0) (cons (/ (* -1 n) g) (/ (* -1 d) g)))
          ((= d 0) (display "error")))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define one-third (make-rat 1 3))
(print-rat (make-rat 2 -4))
(print-rat (make-rat -2 -4))